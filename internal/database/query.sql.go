// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package database

import (
	"context"
)

const addCollectPath = `-- name: AddCollectPath :exec
INSERT INTO collect_paths (path, parent_dir) VALUES (?, ?)
`

type AddCollectPathParams struct {
	Path      string
	ParentDir string
}

func (q *Queries) AddCollectPath(ctx context.Context, arg AddCollectPathParams) error {
	_, err := q.db.ExecContext(ctx, addCollectPath, arg.Path, arg.ParentDir)
	return err
}

const addIgnorePattern = `-- name: AddIgnorePattern :exec
INSERT INTO ignore_patterns (pattern) VALUES (?)
`

func (q *Queries) AddIgnorePattern(ctx context.Context, pattern string) error {
	_, err := q.db.ExecContext(ctx, addIgnorePattern, pattern)
	return err
}

const getCollectPath = `-- name: GetCollectPath :one
SELECT id, path, parent_dir, created_at FROM collect_paths WHERE path = ?
`

func (q *Queries) GetCollectPath(ctx context.Context, path string) (CollectPath, error) {
	row := q.db.QueryRowContext(ctx, getCollectPath, path)
	var i CollectPath
	err := row.Scan(
		&i.ID,
		&i.Path,
		&i.ParentDir,
		&i.CreatedAt,
	)
	return i, err
}

const getCollectPaths = `-- name: GetCollectPaths :many
SELECT id, path, parent_dir, created_at FROM collect_paths
`

func (q *Queries) GetCollectPaths(ctx context.Context) ([]CollectPath, error) {
	rows, err := q.db.QueryContext(ctx, getCollectPaths)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CollectPath
	for rows.Next() {
		var i CollectPath
		if err := rows.Scan(
			&i.ID,
			&i.Path,
			&i.ParentDir,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getIgnorePattern = `-- name: GetIgnorePattern :one
SELECT id, pattern, created_at FROM ignore_patterns WHERE pattern = ?
`

func (q *Queries) GetIgnorePattern(ctx context.Context, pattern string) (IgnorePattern, error) {
	row := q.db.QueryRowContext(ctx, getIgnorePattern, pattern)
	var i IgnorePattern
	err := row.Scan(&i.ID, &i.Pattern, &i.CreatedAt)
	return i, err
}

const getIgnorePatterns = `-- name: GetIgnorePatterns :many
SELECT id, pattern, created_at FROM ignore_patterns
`

func (q *Queries) GetIgnorePatterns(ctx context.Context) ([]IgnorePattern, error) {
	rows, err := q.db.QueryContext(ctx, getIgnorePatterns)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []IgnorePattern
	for rows.Next() {
		var i IgnorePattern
		if err := rows.Scan(&i.ID, &i.Pattern, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeCollectPath = `-- name: RemoveCollectPath :exec
DELETE FROM collect_paths WHERE path = ?
`

func (q *Queries) RemoveCollectPath(ctx context.Context, path string) error {
	_, err := q.db.ExecContext(ctx, removeCollectPath, path)
	return err
}

const removeIgnorePattern = `-- name: RemoveIgnorePattern :exec
DELETE FROM ignore_patterns WHERE pattern = ?
`

func (q *Queries) RemoveIgnorePattern(ctx context.Context, pattern string) error {
	_, err := q.db.ExecContext(ctx, removeIgnorePattern, pattern)
	return err
}
