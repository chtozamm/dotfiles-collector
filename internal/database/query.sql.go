// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package database

import (
	"context"
	"database/sql"
)

const addCollectPath = `-- name: AddCollectPath :exec
INSERT INTO collect_paths (path, parent_dir) VALUES (?, ?)
`

type AddCollectPathParams struct {
	Path      string
	ParentDir sql.NullString
}

func (q *Queries) AddCollectPath(ctx context.Context, arg AddCollectPathParams) error {
	_, err := q.db.ExecContext(ctx, addCollectPath, arg.Path, arg.ParentDir)
	return err
}

const addIgnorePath = `-- name: AddIgnorePath :exec
INSERT INTO ignore_paths (regexp) VALUES (?)
`

func (q *Queries) AddIgnorePath(ctx context.Context, regexp string) error {
	_, err := q.db.ExecContext(ctx, addIgnorePath, regexp)
	return err
}

const getCollectPaths = `-- name: GetCollectPaths :many
SELECT id, path, parent_dir FROM collect_paths
`

func (q *Queries) GetCollectPaths(ctx context.Context) ([]CollectPath, error) {
	rows, err := q.db.QueryContext(ctx, getCollectPaths)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CollectPath
	for rows.Next() {
		var i CollectPath
		if err := rows.Scan(&i.ID, &i.Path, &i.ParentDir); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getIgnorePaths = `-- name: GetIgnorePaths :many
SELECT id, "regexp" FROM ignore_paths
`

func (q *Queries) GetIgnorePaths(ctx context.Context) ([]IgnorePath, error) {
	rows, err := q.db.QueryContext(ctx, getIgnorePaths)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []IgnorePath
	for rows.Next() {
		var i IgnorePath
		if err := rows.Scan(&i.ID, &i.Regexp); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
